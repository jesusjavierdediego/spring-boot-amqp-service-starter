package com.me.amqp.starter.rpc.servers;

import com.me.amqp.starter.rpc.handlers.AMQPRPCServerHandler;
import com.rabbitmq.client.Channel;
import java.io.IOException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.amqp.rabbit.connection.Connection;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;

@Service
public class AMQPRPCMainServer {

    @Value("${amqp.service.starter.rpc.queue.name}")
    private String RPC_QUEUE_NAME;

    @Value("${amqp.service.starter.rpc.queue.isDurable}")
    private Boolean RPC_QUEUE_ISDURABLE;

    @Value("${amqp.service.starter.rpc.queue.exclusive}")
    private Boolean RPC_QUEUE_EXCLUSIVE;

    @Value("${amqp.service.starter.rpc.queue.autodelete}")
    private Boolean RPC_QUEUE_AUTODELETE;

    @Value("${amqp.service.starter.rpc.queue.autoack}")
    private Boolean RPC_QUEUE_AUTOACK;

    @Autowired
    AMQPRPCServerHandler aMQPRPCServerHandler;

    @Autowired
    private ConnectionFactory rabbitConnectionFactory;
    
    Connection connection;
    
    private static final Logger LOGGER = LoggerFactory.getLogger(AMQPRPCMainServer.class);

    public AMQPRPCMainServer() throws Exception {
        connection = rabbitConnectionFactory.createConnection();
        try {
            Channel channel = rabbitConnectionFactory.createConnection().createChannel(true);
            channel.queueDeclare(
                    RPC_QUEUE_NAME,
                    RPC_QUEUE_ISDURABLE,
                    RPC_QUEUE_EXCLUSIVE,
                    RPC_QUEUE_AUTODELETE,
                    null);

            channel.basicQos(1);
            channel.basicConsume(
                    RPC_QUEUE_NAME,
                    RPC_QUEUE_AUTOACK,
                    aMQPRPCServerHandler
            );
            LOGGER.info("[AMQP-service] Awaiting RPC requests in channel");
        } catch (IOException ioe) {
            //TODO
            LOGGER.error("[RPC - Server Constructor] Error handling process: {}", ioe.getMessage());
        }

        /*
         AMQP.Queue.DeclareOk queueDeclare(java.lang.String queue,
         boolean durable,
         boolean exclusive,
         boolean autoDelete,
         java.util.Map<java.lang.String,java.lang.Object> arguments)
         throws java.io.IOException
         Declare a queue
         Parameters:
         queue - the name of the queue
         durable - true if we are declaring a durable queue (the queue will survive a server restart)
         exclusive - true if we are declaring an exclusive queue (restricted to this connection)
         autoDelete - true if we are declaring an autodelete queue (server will delete it when no longer in use)
         arguments - other properties (construction arguments) for the queue
         Returns:RPC_QUEUE_AUTODELETE
         a declaration-confirm method to indicate the queue was successfully declared
         Throws:
         java.io.IOException - if an error is encountered
         */
        /*
         java.lang.String basicConsume(java.lang.String queue,
         boolean autoAck,
         Consumer callback)
         throws java.io.IOException
         Start a non-nolocal, non-exclusive consumer, with a server-generated consumerTag.
         Parameters:
         queue - the name of the queue
         autoAck - true if the server should consider messages acknowledged once delivered; false if the server should expect explicit acknowledgements
         callback - an interface to the consumer object
         Returns:
         the consumerTag generated by the server
         Throws:
         java.io.IOException - if an error is encountered
         */
    }
    
    public void close() throws Exception {
        try {
            connection.close();
        } catch (NullPointerException npe) {
            LOGGER.error("[RPC - Server close()] No connection to be closed: {}", npe.getMessage());
        }
    }

}
